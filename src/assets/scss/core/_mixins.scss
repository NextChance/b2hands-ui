//COMMON MIXINS
@mixin set-content-state($color, $background) {
  &:hover {
    @if ($color) {
      color: $black-80;
    }
    @if ($background) {
      background-color: $black-20;
    }
  }

  &:active {
    @if ($color) {
      color: $black-100;
    }
    @if ($background) {
      background-color: $black-30;
    }
  }

  &:disabled {
    @if ($color) {
      color: $black-50;
    }
    @if ($background) {
      background-color: $black-20;
    }
  }
}


// @include set-content($content-1,$background-3,$border-2)
@mixin set-content($color, $background, $border: false) {
  @include set-content-state($color, $background);

  background-color: $background;
  color: $color;

  @if ($border) {
    border: $border;
  }
}

// @include set-semantic()
@mixin set-semantic($theme, $reverse: false) {
  border: 1px solid map-get($theme, 'regular');
  @if ($reverse) {
    background-color: map-get($theme, 'regular');
    color: $white;

    &:hover {
      background-color: map-get($theme, 'hover');
      border: 1px solid map-get($theme, 'hover');
      color: $white;
    }
  } @else {
    background-color: $white;
    color: map-get($theme, 'regular');

    &:hover {
      border: 1px solid map-get($theme, 'hover');
      color: map-get($theme, 'hover');
    }
  }
}


//TYPO MIXINS
@mixin typography-regular {
  font-family: $font-helvetica-regular;
  font-weight: $font-regular;
}

@mixin typography-medium {
  font-family: $font-helvetica-medium;
  font-weight: $font-medium;
}

@mixin detail ($type) {
  @include typography-regular;

  line-height: $line-height-1;

  @if ($type == 'upper') {
    font-size: $font-size-1;
    text-transform: uppercase;
  } @else if ($type == 'strike') {
    font-size: $font-size-1;
    text-decoration: line-through;
  } @else {
    font-size: $font-size-2;
  }
}

@mixin body ($size) {
  @include typography-regular;
  @if ($size == 'm') {
    font-size: $font-size-4;
    line-height: $line-height-2;
  } @else {
    font-size: $font-size-3;
    line-height: $line-height-1;
  }
}

@mixin button($type) {
  font-size: $font-size-3;
  line-height: $line-height-1;

  @if ($type == 'upper') {
    @include typography-medium;

    text-transform: uppercase;
  } @else {
    @include typography-regular;
  }
}

@mixin headers ($size) {
  font-family: $font-helvetica-regular;
  font-weight: 500;
  @if ($size == 'm') {
    font-size: $font-size-4;
    line-height: $line-height-3;
  } @else if ($size == 'l') {
    font-size: $font-size-6;
    line-height: $line-height-3;
  } @else if ($size == 'xl') {
    font-size: $font-size-7;
    line-height: $line-height-4;
  } @else if ($size == 'xxl') {
    font-size: $font-size-9;
    line-height: $line-height-5;
  } @else {
    font-size: $font-size-3;
    line-height: $line-height-2;
  }
}


// Layout
@mixin get-grid-classes($breakpoints-gaps, $break-points) {
  @each $bp,$bp_size in $break-points {
    @media (min-width: #{$bp_size}) {
      .col-container {
        display: flex;
        flex-wrap: wrap;
        margin-left: -1 * map-get($breakpoints-gaps, $bp)/2;
        margin-right: -1 * map-get($breakpoints-gaps, $bp)/2;
      }

      @for $col from 0 to 12 {
        .col-#{$col+1}--#{$bp} {
          padding-left: map-get($breakpoints-gaps, $bp)/2;
          padding-right: map-get($breakpoints-gaps, $bp)/2;
          width: percentage(1/12*($col+1));
        }
      }
    }
  }
}

//ellipsis
@mixin ellipsis($lines) {
  box-orient: vertical;
  display: box;
  -webkit-line-clamp: $lines;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-word;
}

// static generator
@mixin static-generator-styles ($fragmentName: '') {
  @if ($fragmentName == 'header-S') {
    @include headers('s');

    color: $black-60;
  }

  @if ($fragmentName == 'header-M') {
    @include headers('m');

    color: $black-60;
  }

  @if ($fragmentName == 'header-L') {
    @include headers('l');

    color: $black-100;
  }

  @if ($fragmentName == 'header-XL') {
    @include headers('xl');

    color: $black-100;
  }

  @if ($fragmentName == 'header-XXL') {
    @include headers('xxl');

    color: $black-100;
  }
}


// Recursive custom list generator
@function get-selector-depth ($lvl: 1, $class: '') {
  $next-lvl: $lvl - 1;
  $final-class: $class;
  @if ($next-lvl > 0) {
    $next-class: ' ' + $final-class;
    $final-class: $final-class + get-selector-depth($next-lvl, $next-class);
  }
  @return $final-class;
}

@function get-counter-string ($lvl: 1, $counter-text: '') {
  $next-lvl: $lvl - 1;
  $final-counter-text: counter(#{$counter-text + '-' + $lvl}) '.';
  @if ($next-lvl > 0) {
    $final-counter-text: get-counter-string($next-lvl, $counter-text) $final-counter-text;
  }
  @return $final-counter-text;
}

@mixin get-nested-sections ($depth: 1, $counter-spacing: 0, $selector: '', $counter-name: '') {
  $static-counter-sizes: (
    1: 'header-XL',
    2: 'header-L',
    3: 'header-M'
  );

  $static-element-margin: (
    1: $spacing-size-9,
    2: $spacing-size-7,
    3: $spacing-size-5,
    4: $spacing-size-1
  );


  @for $lvl from 1 through $depth {
    $static-section: get-selector-depth($lvl, $selector);

    #{$static-section} {
      $counter: $counter-name + '-' + $lvl;
      $counter-content: get-counter-string($lvl, $counter-name);

      counter-reset: #{$counter};

      #{$selector}__element {
        counter-increment: #{$counter};
        margin-top: map-get($static-element-margin, $lvl);

        &::before {
          @include static-generator-styles(map-get($static-counter-sizes, $lvl));

          content: $counter-content;
          padding-right: $counter-spacing;
        }
      }
    }
  }
}
